# default.custom.yaml
# encoding: utf-8

patch:
  switcher:
    caption: 〔方案选单〕
    hotkeys:
    - Control+grave

  # 候选词 5 个
  menu:
    page_size: 8

  schema_list:
  - schema: double_pinyin_flypy  # 小鶴雙拼
  - schema: xhup_express # 小鹤音形·连打
  # - schema: xhup # 小鹤音形
  - schema: emoji
  - schema: kaomoji

  ascii_composer:
    good_old_caps_lock: true
    switch_key:
      Shift_L: noop
      Shift_R: clear
      Control_L: noop
      Control_R: noop
      Caps_Lock: noop
      Eisu_toggle: clear

  # 默认标点符号
  # (如果不灵，则 把 luna_pinyin_simp.custom.yaml 里的 punctuator 部分注释掉 )
  punctuator:
    half_shape:
    # 列出和 英文标点 不同的 标点 (即打中文时需要 "特别改" 的标点)
    # 常用标点: 冒号 分号 顿号 名字分词号 逗号 句号 问号 感叹号 钱号 破折号 省略号
    # 成对标点: 双引号 单引号 书名号 括号

      # 常用标点
      ':' : '：'
      ';' : '；'
      '\' : '、'
      '/' : '/'
      '|' : '·'
      ',' : '，'
      '.' : '。'
      '?' : '？'
      '!' : '！'
      '$' : '￥'
      '_' : '——'
      '^' : '……'

      # 成对标点
      # '''' : { pair: [ '‘', '’' ] }
      # '"' : { pair: [ '“', '”' ] }
      '''' : { pair: [ '「', '」' ] }
      '"' : { pair: [ '『', '』' ] }
      '<' : '《'
      '>' : '》'
      '[' : '【'
      ']' : '】'
      '(' : '（'
      ')' : '）'

#     其他标点样式参考。用它们替换上面的配置即可
#     更多参见 ori_default.yaml
#     '<' : [ 《, 〈, «, ‹ ]
#     '>' : [ 》, 〉, », › ]
#     '''' : { pair: [ '‘', '’' ] }
#     '"' : { pair: [ '“', '”' ] }
#     '/': ['/', '÷']
#     '\' : [ 、, '\', ＼ ]
#     '|' : [ ·, '|', ｜, '§', '¦' ]
#     '~' : [ '~', ～ ]
#     '%' : [ '%', ％, '°', '℃' ]
#     '$' : [ ￥, '$', '€', '£', '¥', '¢', '¤' ]
#     '*' : [ '*', ＊, ·, ・, ×, ※, ❂ ]
#     '[' : [ 「, 【, 〔, ［ ]
#     ']' : [ 」, 】, 〕,  ］ ]
#     '{' : [ 『, 〖, ｛ ]
#     '}' : [ 』, 〗, ｝ ]

  key_binder:
    bindings:
      #
      # 快捷键，更多参见 ori_default.yaml
      #
      - { when: always, accept: Shift+space, toggle: full_shape } # Shift+space 切换全角/半角
      - { when: has_menu, accept: minus, send: Page_Up }
      - { when: has_menu, accept: equal, send: Page_Down }
      #
      # paging
      #
      # - { when: has_menu, accept: comma, send: Page_Up }
      # - { when: has_menu, accept: period, send: Page_Down }
      #
      # more technical binding
      #
      # Emacs style
      - { when: composing, accept: Control+p, send: Up }
      - { when: composing, accept: Control+n, send: Down }
      - { when: composing, accept: Control+b, send: Left }
      - { when: composing, accept: Control+f, send: Right }
      - { when: composing, accept: Control+a, send: Home }
      - { when: composing, accept: Control+e, send: End }
      - { when: composing, accept: Control+d, send: Delete }
      - { when: composing, accept: Control+k, send: Shift+Delete }
      - { when: composing, accept: Control+h, send: BackSpace }
      - { when: composing, accept: Control+g, send: Escape }
      # - { when: composing, accept: Control+bracketleft, send: Escape }
      # - { when: composing, accept: Alt+v, send: Page_Up }
      # - { when: composing, accept: Control+v, send: Page_Down }
      # paging keys
      # - { when: composing, accept: ISO_Left_Tab, send: Page_Up }
      - { when: composing, accept: Shift+Tab, send: Page_Up }
      - { when: composing, accept: Tab, send: Page_Down }
      # - { when: has_menu, accept: minus, send: Page_Up }
      # - { when: has_menu, accept: equal, send: Page_Down }
      # - { when: paging, accept: comma, send: Page_Up }
      # - { when: has_menu, accept: period, send: Page_Down }
      # hotkey switch
      # - { when: always, accept: Control+Shift+1, select: .next }
      # - { when: always, accept: Control+Shift+2, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+3, toggle: full_shape }
      # - { when: always, accept: Control+Shift+4, toggle: simplification }
      # - { when: always, accept: Control+Shift+5, toggle: extended_charset }
      # - { when: always, accept: Control+Shift+exclam, select: .next }
      # - { when: always, accept: Control+Shift+at, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+numbersign, toggle: full_shape }
      # - { when: always, accept: Control+Shift+dollar, toggle: simplification }
      # - { when: always, accept: Control+Shift+percent, toggle: extended_charset }
      # - { when: always, accept: Shift+space, toggle: full_shape }
      # - { when: always, accept: Control+period, toggle: ascii_punct }
